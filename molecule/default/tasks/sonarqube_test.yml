---
- name: Create the redhatgov.io/v1alpha1.Sonarqube
  k8s:
    state: present
    namespace: '{{ namespace }}'
    definition: "{{ lookup('template', '/'.join([samples_dir, cr_file])) | from_yaml }}"
    wait: yes
    wait_timeout: 300
    wait_condition:
      type: Running
      reason: Successful
      status: "True"
  vars:
    cr_file: 'redhatgov_v1alpha1_sonarqube_molecule.yaml'

- name: Wait for Sonarqube Ingress to answer
  uri:
    url: http://localhost:30080
  register: _result
  until: _result.status == 200
  retries: 60
  delay: 5

- name: Remove the redhatgov.io/v1alpha1.Sonarqube
  k8s:
    state: absent
    namespace: '{{ namespace }}'
    definition: "{{ lookup('template', '/'.join([samples_dir, cr_file])) | from_yaml }}"
  vars:
    cr_file: 'redhatgov_v1alpha1_sonarqube_molecule.yaml'

- name: Attempt to apply an invalid configurations for Sonarqube
  k8s:
    state: present
    namespace: '{{ namespace }}'
    definition: "{{ lookup('template', '/'.join([samples_dir, cr_file])) | from_yaml | combine(cr_fault) }}"
    wait: yes
    wait_timeout: 300
    wait_condition:
      type: Running
      reason: Successful
      status: "True"
  vars:
    cr_file: 'redhatgov_v1alpha1_sonarqube_molecule.yaml'
  loop:
  - spec: # invalid expose.kind
      sonarqube:
        expose:
          kind: Faulty
  - spec: # invalid expose.ssl type
      sonarqube:
        expose:
          ssl: a string
  - spec: # invalid resources.cpu.request type
      sonarqube:
        resources:
          cpu:
            request: 1
  - spec: # invalid persistent type
      persistent: a string
  loop_control:
    loop_var: cr_fault
  ignore_errors: true
  register: faulty_crs

- name: Verify that the CR failed to be created
  assert:
    that: False not in (faulty_crs | json_query('results[].failed') | list)

- name: Apply the Sonarqube CR in an alternate namespace
  k8s:
    state: present
    namespace: '{{ namespace }}-alt'
    definition: "{{ lookup('template', '/'.join([samples_dir, cr_file])) | from_yaml | combine(namespace_mod) }}"
  vars:
    cr_file: 'redhatgov_v1alpha1_sonarqube_molecule.yaml'
    namespace_mod:
      metadata:
        namespace: '{{ namespace }}-alt'
        name: sonarqube-sample-alt

- name: Wait for CR to be Reconciled
  k8s_info:
    api_version: v1alpha1
    kind: Sonarqube
    namespace: '{{ namespace }}-alt'
    name: sonarqube-sample-alt
  register: namespace_modded_cr
  until: namespace_modded_cr.resources[0].status | json_query("conditions[?(@.reason=='Successful')]")
  retries: 10
  delay: 30
  ignore_errors: true

- when:
  - scope == "namespace"
  - namespace_modded_cr.resources[0].status is defined
  fail:
    msg: "Additional reconciled CR found in alternate namespace when using namespace scope"

- when:
  - scope == "cluster"
  - namespace_modded_cr.resources[0].status is not defined
  fail:
    msg: "Additional reconciled CR NOT found in alternate namespace when using cluster scope"

# TODO:
#   - Validate SonarQube can be used
